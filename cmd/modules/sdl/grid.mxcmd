#!/usr/bin/env mxcmd-cli

cmd "sdl-script.mxcmd"

let width=1280
let height=720
let grid = "grid"
let block = "block"
let grid_w = 32
let grid_h = 16
let size_w = 40
let size_h = 45
let size_val = (size_w * size_h) 
list_new grid size_val "0"
list_new block
list_add  block "255 0 0 255"
list_add  block "0 255 0 255"
list_add  block "0 0 255 255"
list_add  block "255 255 0 255"  
list_add  block "255 0 255 255"
list_add  block "0 255 255 255" 
list_add  block "0 255 255 255"
list_add  block "255 255 255 255"
    
define set_grid()
begin
    random_blocks
    return 0
end

define random_blocks()
begin
    let count = 0
    let index_val = size_val - 1
    while test count --lt index_val
    do
        let color = $(printf "%d" $(rand 1 5))
        list_set grid count color
        count++
    done
    return 0
end

define init_sdl()
begin
    sdl_init
    set_grid
    sdl_window "MXCMD Window" width height
    sdl_renderer -1 
    return 0
end

define clean_sdl()
begin
    sdl_quit
    return 0
end

define draw_grid()
begin
    random_blocks
    let x = 0
    let y = 0
    let grid_x = 0
    let grid_y = 0
    while test y --lt size_h
    do
        grid_x = 0
        x = 0
        while test x --lt size_w
        do
            let grid_pos = (y * size_w) + x
            let pos_val = size_val - 2
            let color_value = $(list_get block $(list_get grid grid_pos))
            if test color_value --eq -1
            then
                let color_value = $(list_get block 0)
                printf "Color value is -1, using default color: %s at %d\n" $(list_get block 0) grid_pos
            fi
            sdl_color_string color_value
            sdl_rect grid_x grid_y grid_w grid_h 1
            x = x + 1
            grid_x = grid_x + grid_w
        done
        grid_y = grid_y + grid_h
        y = y + 1
    done
    return  0
end

define main()
begin
    init_sdl
    running = 1
    while test running --eq 1 
    do
        sdl_set_color 0 0 0 255
        sdl_clear
        draw_grid
        sdl_present
        result = $(sdl_events)
        if test result --eq 0
        then
        break
        fi
    done
    clean_sdl
    return 0
end

main
