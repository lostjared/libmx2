#!/usr/bin/env mxcmd-cli

cmd "sdl-script.mxcmd"

let circles = "#circles"
list_new circles


define add_circle(x, y, radius, dir) 
begin
    list_add circles $(printf "%d,%d,%d,%d,%d,%d,%d" x y radius dir $(rand 0 255) $(rand 0 255) $(rand 0 255))
    return 0
end

define random_circles()
begin
    let counter = 0
    while test counter --lt $(list_len circles)
    do
        list_set circles counter $(printf "%d,%d,%d,%d,%d,%d,%d" $(rand 0 750) $(rand 0 550) 10 $(rand 0 3) $(rand 0 255) $(rand 0 255) $(rand 0 255))
        counter++
    done
    return 0
end
define check_collision(circle1, circle2)
begin
    let values1 = $(regex_split "," circle1)
    let values2 = $(regex_split "," circle2)
    let x1 = $(at values1 0)
    let y1 = $(at values1 1)
    let r1 = $(at values1 2)
    let x2 = $(at values2 0)
    let y2 = $(at values2 1)
    let r2 = $(at values2 2)
    
    let dx = x1 - x2
    let dy = y1 - y2
    let distance_sq = dx * dx + dy * dy 
    let min_distance = (r1 + r2) * (r1 + r2)
    
    if test distance_sq --le min_distance; then
        printf "1"
        return 0
    else
        printf "0"
        return 0
    fi

    printf "0"
    return 0
end

define handle_collisions()
begin
    let i = 0
    let circle_count = $(list_len circles)
    while test i --lt circle_count
    do
        let j =  i + 1 
        while test j --lt circle_count
        do
            let circle1 = $(list_get circles i)
            let circle2 = $(list_get circles j)
            
            if test $(check_collision circle1 circle2) --eq 1; then
                let values1 = $(regex_split "," circle1)
                let values2 = $(regex_split "," circle2)
                let dir1 = $(at values1 3)
                let dir2 = $(at values2 3)
                
                # Reverse directions on collision
                if test dir1 --eq 0; then
                    dir1 = 1
                elif test dir1 --eq 1; then
                    dir1 = 0
                elif test dir1 --eq 2; then
                    dir1 = 3
                else
                    dir1 = 2
                fi
                
                if test dir2 --eq 0; then
                    dir2 = 1
                elif test dir2 --eq 1; then
                    dir2 = 0
                elif test dir2 --eq 2; then
                    dir2 = 3
                else
                    dir2 = 2
                fi
                list_set circles i $(printf "%d,%d,%d,%d,%d,%d,%d" $(at values1 0) $(at values1 1) $(at values1 2) dir1 $(at values1 4) $(at values1 5) $(at values1 6))
                list_set circles j $(printf "%d,%d,%d,%d,%d,%d,%d" $(at values2 0) $(at values2 1) $(at values2 2) dir2 $(at values2 4) $(at values2 5) $(at values2 6))
            fi
            j++
        done
        i++
    done
    return 0
end

define draw_circles()
begin
    let index = 0
    for circle in $(list_tokens circles)
    do
        let values = $(regex_split "," circle)
        let x = $(at values 0)
        let y = $(at values 1)
        let radius = $(at values 2)   
        let dir = $(at values 3)
        let r = $(at values 4)
        let g = $(at values 5)
        let b = $(at values 6)
        sdl_set_color r g b 255
        sdl_circle x y radius
        
        if test dir --eq 0; then
            let new_x = x + 2
            let new_y = y + 2
        elif test dir --eq 1; then
            let new_x = x - 2
            let new_y = y + 2
        elif test dir --eq 2; then
            let new_x = x + 2
            let new_y = y - 2
        else
            let new_x = x - 2
            let new_y = y - 2
        fi
        if test new_x --le 0 || test new_x --ge 800; then
            if test dir --eq 0; then
            dir = 1
            elif test dir --eq 1; then
            dir = 0
            elif test dir --eq 2; then
            dir = 3
            else
            dir = 2
            fi
        fi
        
        if test new_y --le 0 || test new_y --ge 600; then
            if test dir --eq 0; then
            dir = 2
            elif test dir --eq 1; then
            dir = 3
            elif test dir --eq 2; then
            dir = 0
            else
            dir = 1
            fi
        fi
        
        list_set circles index $(printf "%d,%d,%d,%d,%d,%d,%d" new_x new_y radius dir r g b)
        index++
    done
    return 0
end

define init_sdl() 
begin
    sdl_init
    sdl_window "Bounce" 800 600
    sdl_renderer -1 "software"
    return 0
end

define clean_sdl() 
begin
    sdl_quit
    return 0
end


define main() 
begin
    init_sdl
    let counter = 0
    let random_circles = 0
    while test counter --lt 30
    do
        add_circle $(rand 0 750) $(rand 0 550) 10 $(rand 0 3)
        counter++
    done
    while test $(sdl_events) --ne 0 
    do
        sdl_set_color 0 0 0 255
        sdl_clear
        handle_collisions
        draw_circles
        if test random_circles --eq 0; then
            sdl_draw_text "Bounce" 25 25 "./res/font.ttf" 18 255 255 255 255
        else
            sdl_draw_text "R Pressed Random" 25 25 "./res/font.ttf" 18 255 0 0 255
        fi
        sdl_present
        if test $(sdl_key "Q") --eq 1; then
            break
        fi
        if test $(sdl_key "R") --eq 1; then
            random_circles = 1
            random_circles
        else
            random_circles = 0
        fi
    done
    clean_sdl
    return 0
end

main
